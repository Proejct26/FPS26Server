// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR CS_OnAccept::CS_OnAccept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_OnAcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_OnAcceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_OnAcceptDefaultTypeInternal() {}
  union {
    CS_OnAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_OnAcceptDefaultTypeInternal _CS_OnAccept_default_instance_;
PROTOBUF_CONSTEXPR SC_CreateMyCharacter::SC_CreateMyCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_.rotatex_)*/0u
  , /*decltype(_impl_.rotatey_)*/0u
  , /*decltype(_impl_.rotatez_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CreateMyCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CreateMyCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CreateMyCharacterDefaultTypeInternal() {}
  union {
    SC_CreateMyCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CreateMyCharacterDefaultTypeInternal _SC_CreateMyCharacter_default_instance_;
PROTOBUF_CONSTEXPR SC_CreateOtherCharacter::SC_CreateOtherCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_.rotatex_)*/0u
  , /*decltype(_impl_.rotatey_)*/0u
  , /*decltype(_impl_.rotatez_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CreateOtherCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CreateOtherCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CreateOtherCharacterDefaultTypeInternal() {}
  union {
    SC_CreateOtherCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CreateOtherCharacterDefaultTypeInternal _SC_CreateOtherCharacter_default_instance_;
PROTOBUF_CONSTEXPR SC_DeleteCharacter::SC_DeleteCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_DeleteCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_DeleteCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_DeleteCharacterDefaultTypeInternal() {}
  union {
    SC_DeleteCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_DeleteCharacterDefaultTypeInternal _SC_DeleteCharacter_default_instance_;
PROTOBUF_CONSTEXPR CS_MoveStart::CS_MoveStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.keyw_)*/0u
  , /*decltype(_impl_.keya_)*/0u
  , /*decltype(_impl_.keys_)*/0u
  , /*decltype(_impl_.keyd_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MoveStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MoveStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MoveStartDefaultTypeInternal() {}
  union {
    CS_MoveStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MoveStartDefaultTypeInternal _CS_MoveStart_default_instance_;
PROTOBUF_CONSTEXPR SC_MoveStart::SC_MoveStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.keyw_)*/0u
  , /*decltype(_impl_.keya_)*/0u
  , /*decltype(_impl_.keys_)*/0u
  , /*decltype(_impl_.keyd_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MoveStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MoveStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MoveStartDefaultTypeInternal() {}
  union {
    SC_MoveStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MoveStartDefaultTypeInternal _SC_MoveStart_default_instance_;
PROTOBUF_CONSTEXPR CS_MoveStop::CS_MoveStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MoveStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MoveStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MoveStopDefaultTypeInternal() {}
  union {
    CS_MoveStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MoveStopDefaultTypeInternal _CS_MoveStop_default_instance_;
PROTOBUF_CONSTEXPR SC_MoveStop::SC_MoveStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MoveStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MoveStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MoveStopDefaultTypeInternal() {}
  union {
    SC_MoveStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MoveStopDefaultTypeInternal _SC_MoveStop_default_instance_;
PROTOBUF_CONSTEXPR CS_ChangeWeapon::CS_ChangeWeapon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_ChangeWeaponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_ChangeWeaponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_ChangeWeaponDefaultTypeInternal() {}
  union {
    CS_ChangeWeapon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_ChangeWeaponDefaultTypeInternal _CS_ChangeWeapon_default_instance_;
PROTOBUF_CONSTEXPR SC_ChangeWeapon::SC_ChangeWeapon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ChangeWeaponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ChangeWeaponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ChangeWeaponDefaultTypeInternal() {}
  union {
    SC_ChangeWeapon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ChangeWeaponDefaultTypeInternal _SC_ChangeWeapon_default_instance_;
PROTOBUF_CONSTEXPR CS_Attack::CS_Attack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetid_)*/0u
  , /*decltype(_impl_.attacksuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_AttackDefaultTypeInternal() {}
  union {
    CS_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_AttackDefaultTypeInternal _CS_Attack_default_instance_;
PROTOBUF_CONSTEXPR SC_Attack::SC_Attack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_AttackDefaultTypeInternal() {}
  union {
    SC_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_AttackDefaultTypeInternal _SC_Attack_default_instance_;
PROTOBUF_CONSTEXPR SC_Damage::SC_Damage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackerid_)*/0u
  , /*decltype(_impl_.targetid_)*/0u
  , /*decltype(_impl_.damagehp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_DamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_DamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_DamageDefaultTypeInternal() {}
  union {
    SC_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_DamageDefaultTypeInternal _SC_Damage_default_instance_;
PROTOBUF_CONSTEXPR CS_Sync::CS_Sync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_SyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_SyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_SyncDefaultTypeInternal() {}
  union {
    CS_Sync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_SyncDefaultTypeInternal _CS_Sync_default_instance_;
PROTOBUF_CONSTEXPR SC_Sync::SC_Sync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_SyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_SyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_SyncDefaultTypeInternal() {}
  union {
    SC_Sync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_SyncDefaultTypeInternal _SC_Sync_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_OnAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_OnAccept, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.posz_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.rotatex_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.rotatey_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.rotatez_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateMyCharacter, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.posz_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.rotatex_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.rotatey_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.rotatez_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CreateOtherCharacter, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_DeleteCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_DeleteCharacter, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.keyw_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.keya_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.keyd_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStart, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.keyw_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.keya_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.keyd_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStart, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStop, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStop, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStop, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MoveStop, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MoveStop, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_ChangeWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_ChangeWeapon, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ChangeWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ChangeWeapon, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ChangeWeapon, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_Attack, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_Attack, _impl_.attacksuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Attack, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_Damage, _impl_.attackerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Damage, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Damage, _impl_.damagehp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_Sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_Sync, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_Sync, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_Sync, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_Sync, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_Sync, _impl_.posz_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::CS_OnAccept)},
  { 7, -1, -1, sizeof(::game::SC_CreateMyCharacter)},
  { 21, -1, -1, sizeof(::game::SC_CreateOtherCharacter)},
  { 35, -1, -1, sizeof(::game::SC_DeleteCharacter)},
  { 42, -1, -1, sizeof(::game::CS_MoveStart)},
  { 56, -1, -1, sizeof(::game::SC_MoveStart)},
  { 71, -1, -1, sizeof(::game::CS_MoveStop)},
  { 81, -1, -1, sizeof(::game::SC_MoveStop)},
  { 92, -1, -1, sizeof(::game::CS_ChangeWeapon)},
  { 99, -1, -1, sizeof(::game::SC_ChangeWeapon)},
  { 107, -1, -1, sizeof(::game::CS_Attack)},
  { 115, -1, -1, sizeof(::game::SC_Attack)},
  { 126, -1, -1, sizeof(::game::SC_Damage)},
  { 135, -1, -1, sizeof(::game::CS_Sync)},
  { 145, -1, -1, sizeof(::game::SC_Sync)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_CS_OnAccept_default_instance_._instance,
  &::game::_SC_CreateMyCharacter_default_instance_._instance,
  &::game::_SC_CreateOtherCharacter_default_instance_._instance,
  &::game::_SC_DeleteCharacter_default_instance_._instance,
  &::game::_CS_MoveStart_default_instance_._instance,
  &::game::_SC_MoveStart_default_instance_._instance,
  &::game::_CS_MoveStop_default_instance_._instance,
  &::game::_SC_MoveStop_default_instance_._instance,
  &::game::_CS_ChangeWeapon_default_instance_._instance,
  &::game::_SC_ChangeWeapon_default_instance_._instance,
  &::game::_CS_Attack_default_instance_._instance,
  &::game::_SC_Attack_default_instance_._instance,
  &::game::_SC_Damage_default_instance_._instance,
  &::game::_CS_Sync_default_instance_._instance,
  &::game::_SC_Sync_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\004game\"\033\n\013CS_OnAccept\022\014\n"
  "\004name\030\001 \001(\t\"\215\001\n\024SC_CreateMyCharacter\022\n\n\002"
  "id\030\001 \001(\r\022\014\n\004posX\030\002 \001(\r\022\014\n\004posY\030\003 \001(\r\022\014\n\004"
  "posZ\030\004 \001(\r\022\017\n\007rotateX\030\005 \001(\r\022\017\n\007rotateY\030\006"
  " \001(\r\022\017\n\007rotateZ\030\007 \001(\r\022\014\n\004name\030\010 \001(\t\"\216\001\n\027"
  "SC_CreateOtherCharacter\022\n\n\002id\030\001 \001(\r\022\014\n\004p"
  "osX\030\002 \001(\r\022\014\n\004posY\030\003 \001(\r\022\014\n\004posZ\030\004 \001(\r\022\017\n"
  "\007rotateX\030\005 \001(\r\022\017\n\007rotateY\030\006 \001(\r\022\017\n\007rotat"
  "eZ\030\007 \001(\r\022\n\n\002hp\030\010 \001(\r\" \n\022SC_DeleteCharact"
  "er\022\n\n\002id\030\001 \001(\r\"\205\001\n\014CS_MoveStart\022\023\n\013rotat"
  "eAxisY\030\001 \001(\r\022\014\n\004keyW\030\002 \001(\r\022\014\n\004keyA\030\003 \001(\r"
  "\022\014\n\004keyS\030\004 \001(\r\022\014\n\004keyD\030\005 \001(\r\022\014\n\004posX\030\006 \001"
  "(\r\022\014\n\004posY\030\007 \001(\r\022\014\n\004posZ\030\010 \001(\r\"\221\001\n\014SC_Mo"
  "veStart\022\n\n\002id\030\001 \001(\r\022\023\n\013rotateAxisY\030\002 \001(\r"
  "\022\014\n\004keyW\030\003 \001(\r\022\014\n\004keyA\030\004 \001(\r\022\014\n\004keyS\030\005 \001"
  "(\r\022\014\n\004keyD\030\006 \001(\r\022\014\n\004posX\030\007 \001(\r\022\014\n\004posY\030\010"
  " \001(\r\022\014\n\004posZ\030\t \001(\r\"L\n\013CS_MoveStop\022\023\n\013rot"
  "ateAxisY\030\001 \001(\r\022\014\n\004posX\030\002 \001(\r\022\014\n\004posY\030\003 \001"
  "(\r\022\014\n\004posZ\030\004 \001(\r\"X\n\013SC_MoveStop\022\n\n\002id\030\001 "
  "\001(\r\022\023\n\013rotateAxisY\030\002 \001(\r\022\014\n\004posX\030\003 \001(\r\022\014"
  "\n\004posY\030\004 \001(\r\022\014\n\004posZ\030\005 \001(\r\"!\n\017CS_ChangeW"
  "eapon\022\016\n\006weapon\030\001 \001(\r\"-\n\017SC_ChangeWeapon"
  "\022\n\n\002id\030\001 \001(\r\022\016\n\006weapon\030\002 \001(\r\"4\n\tCS_Attac"
  "k\022\020\n\010targetId\030\001 \001(\r\022\025\n\rattackSuccess\030\002 \001"
  "(\010\"V\n\tSC_Attack\022\n\n\002id\030\001 \001(\r\022\023\n\013rotateAxi"
  "sY\030\002 \001(\r\022\014\n\004posX\030\003 \001(\r\022\014\n\004posY\030\004 \001(\r\022\014\n\004"
  "posZ\030\005 \001(\r\"C\n\tSC_Damage\022\022\n\nattackerId\030\001 "
  "\001(\r\022\020\n\010targetId\030\002 \001(\r\022\020\n\010damageHP\030\003 \001(\r\""
  "H\n\007CS_Sync\022\023\n\013rotateAxisY\030\001 \001(\r\022\014\n\004posX\030"
  "\002 \001(\r\022\014\n\004posY\030\003 \001(\r\022\014\n\004posZ\030\004 \001(\r\"T\n\007SC_"
  "Sync\022\n\n\002id\030\001 \001(\r\022\023\n\013rotateAxisY\030\002 \001(\r\022\014\n"
  "\004posX\030\003 \001(\r\022\014\n\004posY\030\004 \001(\r\022\014\n\004posZ\030\005 \001(\r*"
  "\310\002\n\010PacketID\022\032\n\026SC_CREATE_MY_CHARACTER\020\000"
  "\022\035\n\031SC_CREATE_OTHER_CHARACTER\020\001\022\027\n\023SC_DE"
  "LETE_CHARACTER\020\002\022\021\n\rSC_MOVE_START\020\013\022\020\n\014S"
  "C_MOVE_STOP\020\r\022\023\n\017SC_CHANGEWEAPON\020\017\022\r\n\tSC"
  "_ATTACK\020\025\022\r\n\tSC_DAMAGE\020\036\022\014\n\007SC_SYNC\020\373\001\022\014"
  "\n\007SC_ECHO\020\375\001\022\021\n\rCS_MOVE_START\020\n\022\020\n\014CS_MO"
  "VE_STOP\020\014\022\023\n\017CS_CHANGEWEAPON\020\016\022\r\n\tCS_ATT"
  "ACK\020\024\022\017\n\013CS_ONACCEPT\020d\022\014\n\007CS_SYNC\020\372\001\022\014\n\007"
  "CS_ECHO\020\374\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1618, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool PacketID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 30:
    case 100:
    case 250:
    case 251:
    case 252:
    case 253:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CS_OnAccept::_Internal {
 public:
};

CS_OnAccept::CS_OnAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_OnAccept)
}
CS_OnAccept::CS_OnAccept(const CS_OnAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_OnAccept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_OnAccept)
}

inline void CS_OnAccept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_OnAccept::~CS_OnAccept() {
  // @@protoc_insertion_point(destructor:game.CS_OnAccept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_OnAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CS_OnAccept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_OnAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_OnAccept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_OnAccept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_OnAccept.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_OnAccept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_OnAccept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_OnAccept.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_OnAccept)
  return target;
}

size_t CS_OnAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_OnAccept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_OnAccept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_OnAccept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_OnAccept::GetClassData() const { return &_class_data_; }


void CS_OnAccept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_OnAccept*>(&to_msg);
  auto& from = static_cast<const CS_OnAccept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_OnAccept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_OnAccept::CopyFrom(const CS_OnAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_OnAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OnAccept::IsInitialized() const {
  return true;
}

void CS_OnAccept::InternalSwap(CS_OnAccept* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_OnAccept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class SC_CreateMyCharacter::_Internal {
 public:
};

SC_CreateMyCharacter::SC_CreateMyCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CreateMyCharacter)
}
SC_CreateMyCharacter::SC_CreateMyCharacter(const SC_CreateMyCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CreateMyCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , decltype(_impl_.rotatex_){}
    , decltype(_impl_.rotatey_){}
    , decltype(_impl_.rotatez_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotatez_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.rotatez_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CreateMyCharacter)
}

inline void SC_CreateMyCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , decltype(_impl_.rotatex_){0u}
    , decltype(_impl_.rotatey_){0u}
    , decltype(_impl_.rotatez_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SC_CreateMyCharacter::~SC_CreateMyCharacter() {
  // @@protoc_insertion_point(destructor:game.SC_CreateMyCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CreateMyCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SC_CreateMyCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CreateMyCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CreateMyCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotatez_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.rotatez_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CreateMyCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rotatex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rotatez_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SC_CreateMyCharacter.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CreateMyCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CreateMyCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posx(), target);
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posy(), target);
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posz(), target);
  }

  // uint32 rotateX = 5;
  if (this->_internal_rotatex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rotatex(), target);
  }

  // uint32 rotateY = 6;
  if (this->_internal_rotatey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rotatey(), target);
  }

  // uint32 rotateZ = 7;
  if (this->_internal_rotatez() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rotatez(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SC_CreateMyCharacter.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CreateMyCharacter)
  return target;
}

size_t SC_CreateMyCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CreateMyCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  // uint32 rotateX = 5;
  if (this->_internal_rotatex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatex());
  }

  // uint32 rotateY = 6;
  if (this->_internal_rotatey() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatey());
  }

  // uint32 rotateZ = 7;
  if (this->_internal_rotatez() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatez());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CreateMyCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CreateMyCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CreateMyCharacter::GetClassData() const { return &_class_data_; }


void SC_CreateMyCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CreateMyCharacter*>(&to_msg);
  auto& from = static_cast<const SC_CreateMyCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CreateMyCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  if (from._internal_rotatex() != 0) {
    _this->_internal_set_rotatex(from._internal_rotatex());
  }
  if (from._internal_rotatey() != 0) {
    _this->_internal_set_rotatey(from._internal_rotatey());
  }
  if (from._internal_rotatez() != 0) {
    _this->_internal_set_rotatez(from._internal_rotatez());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CreateMyCharacter::CopyFrom(const SC_CreateMyCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CreateMyCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CreateMyCharacter::IsInitialized() const {
  return true;
}

void SC_CreateMyCharacter::InternalSwap(SC_CreateMyCharacter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CreateMyCharacter, _impl_.rotatez_)
      + sizeof(SC_CreateMyCharacter::_impl_.rotatez_)
      - PROTOBUF_FIELD_OFFSET(SC_CreateMyCharacter, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CreateMyCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class SC_CreateOtherCharacter::_Internal {
 public:
};

SC_CreateOtherCharacter::SC_CreateOtherCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CreateOtherCharacter)
}
SC_CreateOtherCharacter::SC_CreateOtherCharacter(const SC_CreateOtherCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CreateOtherCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , decltype(_impl_.rotatex_){}
    , decltype(_impl_.rotatey_){}
    , decltype(_impl_.rotatez_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CreateOtherCharacter)
}

inline void SC_CreateOtherCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , decltype(_impl_.rotatex_){0u}
    , decltype(_impl_.rotatey_){0u}
    , decltype(_impl_.rotatez_){0u}
    , decltype(_impl_.hp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CreateOtherCharacter::~SC_CreateOtherCharacter() {
  // @@protoc_insertion_point(destructor:game.SC_CreateOtherCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CreateOtherCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_CreateOtherCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CreateOtherCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CreateOtherCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CreateOtherCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rotatex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rotatez_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CreateOtherCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CreateOtherCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posx(), target);
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posy(), target);
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posz(), target);
  }

  // uint32 rotateX = 5;
  if (this->_internal_rotatex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rotatex(), target);
  }

  // uint32 rotateY = 6;
  if (this->_internal_rotatey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rotatey(), target);
  }

  // uint32 rotateZ = 7;
  if (this->_internal_rotatez() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rotatez(), target);
  }

  // uint32 hp = 8;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CreateOtherCharacter)
  return target;
}

size_t SC_CreateOtherCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CreateOtherCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  // uint32 rotateX = 5;
  if (this->_internal_rotatex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatex());
  }

  // uint32 rotateY = 6;
  if (this->_internal_rotatey() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatey());
  }

  // uint32 rotateZ = 7;
  if (this->_internal_rotatez() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotatez());
  }

  // uint32 hp = 8;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CreateOtherCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CreateOtherCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CreateOtherCharacter::GetClassData() const { return &_class_data_; }


void SC_CreateOtherCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CreateOtherCharacter*>(&to_msg);
  auto& from = static_cast<const SC_CreateOtherCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CreateOtherCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  if (from._internal_rotatex() != 0) {
    _this->_internal_set_rotatex(from._internal_rotatex());
  }
  if (from._internal_rotatey() != 0) {
    _this->_internal_set_rotatey(from._internal_rotatey());
  }
  if (from._internal_rotatez() != 0) {
    _this->_internal_set_rotatez(from._internal_rotatez());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CreateOtherCharacter::CopyFrom(const SC_CreateOtherCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CreateOtherCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CreateOtherCharacter::IsInitialized() const {
  return true;
}

void SC_CreateOtherCharacter::InternalSwap(SC_CreateOtherCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CreateOtherCharacter, _impl_.hp_)
      + sizeof(SC_CreateOtherCharacter::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(SC_CreateOtherCharacter, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CreateOtherCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class SC_DeleteCharacter::_Internal {
 public:
};

SC_DeleteCharacter::SC_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_DeleteCharacter)
}
SC_DeleteCharacter::SC_DeleteCharacter(const SC_DeleteCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_DeleteCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:game.SC_DeleteCharacter)
}

inline void SC_DeleteCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_DeleteCharacter::~SC_DeleteCharacter() {
  // @@protoc_insertion_point(destructor:game.SC_DeleteCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_DeleteCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_DeleteCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_DeleteCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_DeleteCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_DeleteCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_DeleteCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_DeleteCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_DeleteCharacter)
  return target;
}

size_t SC_DeleteCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_DeleteCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_DeleteCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_DeleteCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_DeleteCharacter::GetClassData() const { return &_class_data_; }


void SC_DeleteCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_DeleteCharacter*>(&to_msg);
  auto& from = static_cast<const SC_DeleteCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_DeleteCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_DeleteCharacter::CopyFrom(const SC_DeleteCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_DeleteCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DeleteCharacter::IsInitialized() const {
  return true;
}

void SC_DeleteCharacter::InternalSwap(SC_DeleteCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DeleteCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class CS_MoveStart::_Internal {
 public:
};

CS_MoveStart::CS_MoveStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MoveStart)
}
CS_MoveStart::CS_MoveStart(const CS_MoveStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MoveStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.keyw_){}
    , decltype(_impl_.keya_){}
    , decltype(_impl_.keys_){}
    , decltype(_impl_.keyd_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rotateaxisy_, &from._impl_.rotateaxisy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MoveStart)
}

inline void CS_MoveStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.keyw_){0u}
    , decltype(_impl_.keya_){0u}
    , decltype(_impl_.keys_){0u}
    , decltype(_impl_.keyd_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MoveStart::~CS_MoveStart() {
  // @@protoc_insertion_point(destructor:game.CS_MoveStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MoveStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MoveStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MoveStart::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MoveStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rotateaxisy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MoveStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rotateAxisY = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyW = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keyw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keya_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyD = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.keyd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MoveStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MoveStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rotateaxisy(), target);
  }

  // uint32 keyW = 2;
  if (this->_internal_keyw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keyw(), target);
  }

  // uint32 keyA = 3;
  if (this->_internal_keya() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keya(), target);
  }

  // uint32 keyS = 4;
  if (this->_internal_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keys(), target);
  }

  // uint32 keyD = 5;
  if (this->_internal_keyd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_keyd(), target);
  }

  // uint32 posX = 6;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_posx(), target);
  }

  // uint32 posY = 7;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_posy(), target);
  }

  // uint32 posZ = 8;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MoveStart)
  return target;
}

size_t CS_MoveStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MoveStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 keyW = 2;
  if (this->_internal_keyw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyw());
  }

  // uint32 keyA = 3;
  if (this->_internal_keya() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keya());
  }

  // uint32 keyS = 4;
  if (this->_internal_keys() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keys());
  }

  // uint32 keyD = 5;
  if (this->_internal_keyd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyd());
  }

  // uint32 posX = 6;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 7;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 8;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MoveStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MoveStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MoveStart::GetClassData() const { return &_class_data_; }


void CS_MoveStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MoveStart*>(&to_msg);
  auto& from = static_cast<const CS_MoveStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MoveStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_keyw() != 0) {
    _this->_internal_set_keyw(from._internal_keyw());
  }
  if (from._internal_keya() != 0) {
    _this->_internal_set_keya(from._internal_keya());
  }
  if (from._internal_keys() != 0) {
    _this->_internal_set_keys(from._internal_keys());
  }
  if (from._internal_keyd() != 0) {
    _this->_internal_set_keyd(from._internal_keyd());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MoveStart::CopyFrom(const CS_MoveStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MoveStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MoveStart::IsInitialized() const {
  return true;
}

void CS_MoveStart::InternalSwap(CS_MoveStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MoveStart, _impl_.posz_)
      + sizeof(CS_MoveStart::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_MoveStart, _impl_.rotateaxisy_)>(
          reinterpret_cast<char*>(&_impl_.rotateaxisy_),
          reinterpret_cast<char*>(&other->_impl_.rotateaxisy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MoveStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class SC_MoveStart::_Internal {
 public:
};

SC_MoveStart::SC_MoveStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MoveStart)
}
SC_MoveStart::SC_MoveStart(const SC_MoveStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MoveStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.keyw_){}
    , decltype(_impl_.keya_){}
    , decltype(_impl_.keys_){}
    , decltype(_impl_.keyd_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MoveStart)
}

inline void SC_MoveStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.keyw_){0u}
    , decltype(_impl_.keya_){0u}
    , decltype(_impl_.keys_){0u}
    , decltype(_impl_.keyd_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MoveStart::~SC_MoveStart() {
  // @@protoc_insertion_point(destructor:game.SC_MoveStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MoveStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MoveStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MoveStart::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MoveStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MoveStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateAxisY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyW = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keyw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyA = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.keya_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyS = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyD = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.keyd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MoveStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MoveStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rotateaxisy(), target);
  }

  // uint32 keyW = 3;
  if (this->_internal_keyw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keyw(), target);
  }

  // uint32 keyA = 4;
  if (this->_internal_keya() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keya(), target);
  }

  // uint32 keyS = 5;
  if (this->_internal_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_keys(), target);
  }

  // uint32 keyD = 6;
  if (this->_internal_keyd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_keyd(), target);
  }

  // uint32 posX = 7;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_posx(), target);
  }

  // uint32 posY = 8;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_posy(), target);
  }

  // uint32 posZ = 9;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MoveStart)
  return target;
}

size_t SC_MoveStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MoveStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 keyW = 3;
  if (this->_internal_keyw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyw());
  }

  // uint32 keyA = 4;
  if (this->_internal_keya() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keya());
  }

  // uint32 keyS = 5;
  if (this->_internal_keys() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keys());
  }

  // uint32 keyD = 6;
  if (this->_internal_keyd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyd());
  }

  // uint32 posX = 7;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 8;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 9;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MoveStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MoveStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MoveStart::GetClassData() const { return &_class_data_; }


void SC_MoveStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MoveStart*>(&to_msg);
  auto& from = static_cast<const SC_MoveStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MoveStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_keyw() != 0) {
    _this->_internal_set_keyw(from._internal_keyw());
  }
  if (from._internal_keya() != 0) {
    _this->_internal_set_keya(from._internal_keya());
  }
  if (from._internal_keys() != 0) {
    _this->_internal_set_keys(from._internal_keys());
  }
  if (from._internal_keyd() != 0) {
    _this->_internal_set_keyd(from._internal_keyd());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MoveStart::CopyFrom(const SC_MoveStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MoveStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MoveStart::IsInitialized() const {
  return true;
}

void SC_MoveStart::InternalSwap(SC_MoveStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MoveStart, _impl_.posz_)
      + sizeof(SC_MoveStart::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_MoveStart, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MoveStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class CS_MoveStop::_Internal {
 public:
};

CS_MoveStop::CS_MoveStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MoveStop)
}
CS_MoveStop::CS_MoveStop(const CS_MoveStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MoveStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rotateaxisy_, &from._impl_.rotateaxisy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MoveStop)
}

inline void CS_MoveStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MoveStop::~CS_MoveStop() {
  // @@protoc_insertion_point(destructor:game.CS_MoveStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MoveStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MoveStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MoveStop::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MoveStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rotateaxisy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MoveStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rotateAxisY = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MoveStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MoveStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rotateaxisy(), target);
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posx(), target);
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posy(), target);
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MoveStop)
  return target;
}

size_t CS_MoveStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MoveStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MoveStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MoveStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MoveStop::GetClassData() const { return &_class_data_; }


void CS_MoveStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MoveStop*>(&to_msg);
  auto& from = static_cast<const CS_MoveStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MoveStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MoveStop::CopyFrom(const CS_MoveStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MoveStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MoveStop::IsInitialized() const {
  return true;
}

void CS_MoveStop::InternalSwap(CS_MoveStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MoveStop, _impl_.posz_)
      + sizeof(CS_MoveStop::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_MoveStop, _impl_.rotateaxisy_)>(
          reinterpret_cast<char*>(&_impl_.rotateaxisy_),
          reinterpret_cast<char*>(&other->_impl_.rotateaxisy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MoveStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class SC_MoveStop::_Internal {
 public:
};

SC_MoveStop::SC_MoveStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MoveStop)
}
SC_MoveStop::SC_MoveStop(const SC_MoveStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MoveStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MoveStop)
}

inline void SC_MoveStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MoveStop::~SC_MoveStop() {
  // @@protoc_insertion_point(destructor:game.SC_MoveStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MoveStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MoveStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MoveStop::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MoveStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MoveStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateAxisY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MoveStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MoveStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rotateaxisy(), target);
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posx(), target);
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posy(), target);
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MoveStop)
  return target;
}

size_t SC_MoveStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MoveStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MoveStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MoveStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MoveStop::GetClassData() const { return &_class_data_; }


void SC_MoveStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MoveStop*>(&to_msg);
  auto& from = static_cast<const SC_MoveStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MoveStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MoveStop::CopyFrom(const SC_MoveStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MoveStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MoveStop::IsInitialized() const {
  return true;
}

void SC_MoveStop::InternalSwap(SC_MoveStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MoveStop, _impl_.posz_)
      + sizeof(SC_MoveStop::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_MoveStop, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MoveStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class CS_ChangeWeapon::_Internal {
 public:
};

CS_ChangeWeapon::CS_ChangeWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_ChangeWeapon)
}
CS_ChangeWeapon::CS_ChangeWeapon(const CS_ChangeWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_ChangeWeapon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.weapon_ = from._impl_.weapon_;
  // @@protoc_insertion_point(copy_constructor:game.CS_ChangeWeapon)
}

inline void CS_ChangeWeapon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_ChangeWeapon::~CS_ChangeWeapon() {
  // @@protoc_insertion_point(destructor:game.CS_ChangeWeapon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_ChangeWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_ChangeWeapon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_ChangeWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_ChangeWeapon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weapon_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ChangeWeapon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 weapon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_ChangeWeapon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_ChangeWeapon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 weapon = 1;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_ChangeWeapon)
  return target;
}

size_t CS_ChangeWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_ChangeWeapon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 weapon = 1;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_ChangeWeapon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_ChangeWeapon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_ChangeWeapon::GetClassData() const { return &_class_data_; }


void CS_ChangeWeapon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_ChangeWeapon*>(&to_msg);
  auto& from = static_cast<const CS_ChangeWeapon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_ChangeWeapon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_ChangeWeapon::CopyFrom(const CS_ChangeWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_ChangeWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ChangeWeapon::IsInitialized() const {
  return true;
}

void CS_ChangeWeapon::InternalSwap(CS_ChangeWeapon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.weapon_, other->_impl_.weapon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ChangeWeapon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class SC_ChangeWeapon::_Internal {
 public:
};

SC_ChangeWeapon::SC_ChangeWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ChangeWeapon)
}
SC_ChangeWeapon::SC_ChangeWeapon(const SC_ChangeWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ChangeWeapon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.weapon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weapon_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weapon_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ChangeWeapon)
}

inline void SC_ChangeWeapon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.weapon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ChangeWeapon::~SC_ChangeWeapon() {
  // @@protoc_insertion_point(destructor:game.SC_ChangeWeapon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ChangeWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ChangeWeapon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ChangeWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ChangeWeapon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weapon_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weapon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ChangeWeapon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weapon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ChangeWeapon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ChangeWeapon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ChangeWeapon)
  return target;
}

size_t SC_ChangeWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ChangeWeapon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ChangeWeapon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ChangeWeapon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ChangeWeapon::GetClassData() const { return &_class_data_; }


void SC_ChangeWeapon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ChangeWeapon*>(&to_msg);
  auto& from = static_cast<const SC_ChangeWeapon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ChangeWeapon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ChangeWeapon::CopyFrom(const SC_ChangeWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ChangeWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ChangeWeapon::IsInitialized() const {
  return true;
}

void SC_ChangeWeapon::InternalSwap(SC_ChangeWeapon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ChangeWeapon, _impl_.weapon_)
      + sizeof(SC_ChangeWeapon::_impl_.weapon_)
      - PROTOBUF_FIELD_OFFSET(SC_ChangeWeapon, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ChangeWeapon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class CS_Attack::_Internal {
 public:
};

CS_Attack::CS_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_Attack)
}
CS_Attack::CS_Attack(const CS_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_Attack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetid_){}
    , decltype(_impl_.attacksuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.targetid_, &from._impl_.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attacksuccess_) -
    reinterpret_cast<char*>(&_impl_.targetid_)) + sizeof(_impl_.attacksuccess_));
  // @@protoc_insertion_point(copy_constructor:game.CS_Attack)
}

inline void CS_Attack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetid_){0u}
    , decltype(_impl_.attacksuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_Attack::~CS_Attack() {
  // @@protoc_insertion_point(destructor:game.CS_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_Attack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attacksuccess_) -
      reinterpret_cast<char*>(&_impl_.targetid_)) + sizeof(_impl_.attacksuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool attackSuccess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attacksuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_targetid(), target);
  }

  // bool attackSuccess = 2;
  if (this->_internal_attacksuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_attacksuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_Attack)
  return target;
}

size_t CS_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  // bool attackSuccess = 2;
  if (this->_internal_attacksuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Attack::GetClassData() const { return &_class_data_; }


void CS_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_Attack*>(&to_msg);
  auto& from = static_cast<const CS_Attack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_Attack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_attacksuccess() != 0) {
    _this->_internal_set_attacksuccess(from._internal_attacksuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_Attack::CopyFrom(const CS_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Attack::IsInitialized() const {
  return true;
}

void CS_Attack::InternalSwap(CS_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_Attack, _impl_.attacksuccess_)
      + sizeof(CS_Attack::_impl_.attacksuccess_)
      - PROTOBUF_FIELD_OFFSET(CS_Attack, _impl_.targetid_)>(
          reinterpret_cast<char*>(&_impl_.targetid_),
          reinterpret_cast<char*>(&other->_impl_.targetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class SC_Attack::_Internal {
 public:
};

SC_Attack::SC_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_Attack)
}
SC_Attack::SC_Attack(const SC_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Attack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_Attack)
}

inline void SC_Attack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Attack::~SC_Attack() {
  // @@protoc_insertion_point(destructor:game.SC_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_Attack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateAxisY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rotateaxisy(), target);
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posx(), target);
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posy(), target);
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_Attack)
  return target;
}

size_t SC_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Attack::GetClassData() const { return &_class_data_; }


void SC_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Attack*>(&to_msg);
  auto& from = static_cast<const SC_Attack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_Attack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Attack::CopyFrom(const SC_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Attack::IsInitialized() const {
  return true;
}

void SC_Attack::InternalSwap(SC_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_Attack, _impl_.posz_)
      + sizeof(SC_Attack::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_Attack, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class SC_Damage::_Internal {
 public:
};

SC_Damage::SC_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_Damage)
}
SC_Damage::SC_Damage(const SC_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Damage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackerid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.damagehp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attackerid_, &from._impl_.attackerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damagehp_) -
    reinterpret_cast<char*>(&_impl_.attackerid_)) + sizeof(_impl_.damagehp_));
  // @@protoc_insertion_point(copy_constructor:game.SC_Damage)
}

inline void SC_Damage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackerid_){0u}
    , decltype(_impl_.targetid_){0u}
    , decltype(_impl_.damagehp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Damage::~SC_Damage() {
  // @@protoc_insertion_point(destructor:game.SC_Damage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_Damage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_Damage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.attackerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damagehp_) -
      reinterpret_cast<char*>(&_impl_.attackerid_)) + sizeof(_impl_.damagehp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Damage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 attackerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.attackerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damageHP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damagehp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Damage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_Damage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 attackerId = 1;
  if (this->_internal_attackerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attackerid(), target);
  }

  // uint32 targetId = 2;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_targetid(), target);
  }

  // uint32 damageHP = 3;
  if (this->_internal_damagehp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damagehp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_Damage)
  return target;
}

size_t SC_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_Damage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 attackerId = 1;
  if (this->_internal_attackerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attackerid());
  }

  // uint32 targetId = 2;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  // uint32 damageHP = 3;
  if (this->_internal_damagehp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damagehp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Damage::GetClassData() const { return &_class_data_; }


void SC_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Damage*>(&to_msg);
  auto& from = static_cast<const SC_Damage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_Damage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attackerid() != 0) {
    _this->_internal_set_attackerid(from._internal_attackerid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_damagehp() != 0) {
    _this->_internal_set_damagehp(from._internal_damagehp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Damage::CopyFrom(const SC_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Damage::IsInitialized() const {
  return true;
}

void SC_Damage::InternalSwap(SC_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_Damage, _impl_.damagehp_)
      + sizeof(SC_Damage::_impl_.damagehp_)
      - PROTOBUF_FIELD_OFFSET(SC_Damage, _impl_.attackerid_)>(
          reinterpret_cast<char*>(&_impl_.attackerid_),
          reinterpret_cast<char*>(&other->_impl_.attackerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Damage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class CS_Sync::_Internal {
 public:
};

CS_Sync::CS_Sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_Sync)
}
CS_Sync::CS_Sync(const CS_Sync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_Sync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rotateaxisy_, &from._impl_.rotateaxisy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_Sync)
}

inline void CS_Sync::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_Sync::~CS_Sync() {
  // @@protoc_insertion_point(destructor:game.CS_Sync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_Sync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_Sync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_Sync::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_Sync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rotateaxisy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.rotateaxisy_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_Sync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rotateAxisY = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_Sync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_Sync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rotateaxisy(), target);
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posx(), target);
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posy(), target);
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_Sync)
  return target;
}

size_t CS_Sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_Sync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rotateAxisY = 1;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 posX = 2;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 3;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 4;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Sync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_Sync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Sync::GetClassData() const { return &_class_data_; }


void CS_Sync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_Sync*>(&to_msg);
  auto& from = static_cast<const CS_Sync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_Sync)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_Sync::CopyFrom(const CS_Sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Sync::IsInitialized() const {
  return true;
}

void CS_Sync::InternalSwap(CS_Sync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_Sync, _impl_.posz_)
      + sizeof(CS_Sync::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_Sync, _impl_.rotateaxisy_)>(
          reinterpret_cast<char*>(&_impl_.rotateaxisy_),
          reinterpret_cast<char*>(&other->_impl_.rotateaxisy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_Sync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class SC_Sync::_Internal {
 public:
};

SC_Sync::SC_Sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_Sync)
}
SC_Sync::SC_Sync(const SC_Sync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Sync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_Sync)
}

inline void SC_Sync::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Sync::~SC_Sync() {
  // @@protoc_insertion_point(destructor:game.SC_Sync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Sync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_Sync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Sync::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_Sync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Sync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotateAxisY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Sync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_Sync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rotateaxisy(), target);
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posx(), target);
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posy(), target);
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_Sync)
  return target;
}

size_t SC_Sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_Sync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 rotateAxisY = 2;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotateaxisy());
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 5;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Sync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Sync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Sync::GetClassData() const { return &_class_data_; }


void SC_Sync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Sync*>(&to_msg);
  auto& from = static_cast<const SC_Sync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_Sync)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Sync::CopyFrom(const SC_Sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Sync::IsInitialized() const {
  return true;
}

void SC_Sync::InternalSwap(SC_Sync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_Sync, _impl_.posz_)
      + sizeof(SC_Sync::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_Sync, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Sync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::CS_OnAccept*
Arena::CreateMaybeMessage< ::game::CS_OnAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_OnAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CreateMyCharacter*
Arena::CreateMaybeMessage< ::game::SC_CreateMyCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CreateMyCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CreateOtherCharacter*
Arena::CreateMaybeMessage< ::game::SC_CreateOtherCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CreateOtherCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_DeleteCharacter*
Arena::CreateMaybeMessage< ::game::SC_DeleteCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_DeleteCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MoveStart*
Arena::CreateMaybeMessage< ::game::CS_MoveStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MoveStart >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MoveStart*
Arena::CreateMaybeMessage< ::game::SC_MoveStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MoveStart >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MoveStop*
Arena::CreateMaybeMessage< ::game::CS_MoveStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MoveStop >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MoveStop*
Arena::CreateMaybeMessage< ::game::SC_MoveStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MoveStop >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_ChangeWeapon*
Arena::CreateMaybeMessage< ::game::CS_ChangeWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_ChangeWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ChangeWeapon*
Arena::CreateMaybeMessage< ::game::SC_ChangeWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ChangeWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_Attack*
Arena::CreateMaybeMessage< ::game::CS_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_Attack*
Arena::CreateMaybeMessage< ::game::SC_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_Damage*
Arena::CreateMaybeMessage< ::game::SC_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_Sync*
Arena::CreateMaybeMessage< ::game::CS_Sync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_Sync >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_Sync*
Arena::CreateMaybeMessage< ::game::SC_Sync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_Sync >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
